# -*- coding: utf-8 -*-
"""Predição_de_ações_bolsa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VYnC1-8D-9-9zbFlbHVzdESzcSnPLstH
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
import datetime as dt
from datetime import timedelta
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, r2_score
from numpy import loadtxt
from keras import models

model = models.load_model('model_Magalu.h5')

acao = "MGLU3.SA" #Magalu
#acao = "PETR4.SA" #Petrobras
inicio = "2014-12-31"
final = dt.datetime.today().strftime('%Y-%m-%d')

dados_acao = yf.download(acao, inicio, final)

#A Cotação não pode ser ajustada
#Criando um array para trabalhar com Vetores

cotacao = dados_acao['Close'].to_numpy().reshape(-1,1)

tamanho_dados= int(len(cotacao) * 0.8)

#Escalar dados entre 0 e 1, para deixar mais facil processamento
#dados em escala pré definidos são mais faceis de usar
escalador = MinMaxScaler(feature_range=(0,1))

dados_entre_0_e_1_treinamento = escalador.fit_transform(cotacao[0: tamanho_dados, :])

dados_entre_0_e_1_teste = escalador.fit_transform(cotacao[tamanho_dados:, :])

dados_entre_0_e_1 = list(dados_entre_0_e_1_treinamento.reshape(
    len(dados_entre_0_e_1_treinamento))) + list(dados_entre_0_e_1_teste.reshape(len(dados_entre_0_e_1_teste)))

dados_entre_0_e_1 = np.array(dados_entre_0_e_1).reshape(len(dados_entre_0_e_1), 1)

#criar os dados de teste
dados_teste = dados_entre_0_e_1[tamanho_dados - 60: , :]

teste_x = []
teste_y = cotacao[tamanho_dados:, :]

for i in range(60, len(dados_teste)):
  teste_x.append(dados_teste[i-60:i, 0])

#reshape
teste_x = np.array(teste_x)
teste_x = teste_x.reshape(teste_x.shape[0], teste_x.shape[1], 1)

#pegando predições do modelo

predicoes = model.predict(teste_x)

#tirando a escala dos dados

predicoes = escalador.inverse_transform(predicoes)

predicoes

#pegando o erro medio quadratico (RMSE)

rmse = np.sqrt(np.mean(predicoes - teste_y) ** 2)
rmse

#criando o grafico do modelo

treinamento = dados_acao.iloc[: tamanho_dados, :]
df_teste = pd.DataFrame({"Close" : dados_acao['Close'].iloc[tamanho_dados:],
                         "predicoes":predicoes.reshape(len(predicoes))})

plt.figure(figsize = (16,8))
plt.title('Modelo')
plt.xlabel('Data', fontsize=18)
plt.ylabel('Preço de fechamento', fontsize=18)
plt.plot(treinamento['Close'])
plt.plot(df_teste[['Close', 'predicoes']])
plt.legend(['Treinamento', 'Real', 'Predicoes'], loc=2, prop={'size':16})
plt.show()

#calcular media de acertos e lucro

df_teste['variacao_percentual_acao'] = df_teste['Close'].pct_change()
df_teste['variacao_percentual_modelo'] = df_teste['predicoes'].pct_change()

df_teste = df_teste.dropna()

df_teste['var_acao_maior_menor_que_zero'] = np.where(df_teste['variacao_percentual_acao'] > 0,
                                               True, False)
df_teste['var_modelo_maior_menor_que_zero'] = np.where(df_teste['variacao_percentual_modelo'] > 0,
                                               True, False)

df_teste['acertou_o_lado'] = np.where(df_teste['var_acao_maior_menor_que_zero'] == df_teste['var_modelo_maior_menor_que_zero'] ,
                                      True, False)

df_teste['variacao_percentual_acao_abs'] = df_teste['variacao_percentual_acao'].abs()

df_teste

acertou_lado = df_teste['acertou_o_lado'].sum()/len(df_teste['acertou_o_lado'])
errou_lado = 1 - acertou_lado

media_lucro = df_teste.groupby('acertou_o_lado')['variacao_percentual_acao_abs'].mean()

exp_mat_lucro = acertou_lado * media_lucro[1] - media_lucro[0] * errou_lado

ganho_sobre_perda = media_lucro[1] / media_lucro[0]

print(media_lucro)
print(ganho_sobre_perda)
print(acertou_lado)
print(exp_mat_lucro * 100)